;; Little Smalltalk primitives
;; from Budd 1983
	!cpu 65816

	;; arg count in register A
	;; next in bytecode is primitive number
	;; Primitive dictionary:
	;; NEXT: pointer to next entry
	;; ID: 
	;; then code

PRIMDO:
	LDA RCX
	PHA

PFIND:
	LDA PRIMAX
	STA RA
	LDY .ID
-	LDA (RW)
	AND RAMASK
	CMP (RA),Y
	BEQ .FOUND
	LDA (RA)	;; go to next entry
	BEQ .FOUND	;; final entry TRAP
	STA RA
	BRA -
.FOUND
	INC RW		;; skip the primitive number
	LDA .CODE
	CLC
	ADC RA
	STA EV
	JMP (EV)

PRIMDONE:
	PLA
	STA RCX
	RTS

	.TRUE = $EFF4
	.FALSE = $EFF2
	.NIL = $EFF0

.ID:	!word $0002
.CODE:	!word $0004

!macro next .addr {
	!word .addr
}
!macro primitive .id {
	!word .id
}
P_TRAP:
	+next $0000
	+primitive $13 ;; error trap or primitive not found
.TRAP
	BRA .TRAP

P_IDENT:
	+next P_TRAP
	+primitive $01 ;; identity
	+ipop
	STA RA
	+ipop
	CMP RA
	BNE +
	+const .TRUE
	+ipush
	JMP PRIMDONE
+	+const .FALSE
	+ipush
	JMP PRIMDONE

P_OCLASS:
	+next P_IDENT
	+primitive $02 ;; 10r02 get class of object i(object -- class)
	+ipop
	STA RA
	+const $0002	;; object is [size] [class] [stuff...]
	TAY
	LDA (RA),Y
	+ipush
	JMP PRIMDONE

P_PUTCH:
	+next P_OCLASS
	+primitive $03 ;; print a single character
	+ipop
	JSR CHOUT
	+long
	+const .NIL	;; return nil
	+ipush
	JMP PRIMDONE

P_OSIZE:
	+next P_PUTCH
	+primitive $04 ;; object size
	+ipop
	STA RA
	LDA (RA)
	BPL +
	+const $7FFF	;; byteArray -- adjust size
	AND (RA)
+	+ipush
	JMP PRIMDONE

P_ATPUT:
	+next P_OSIZE
	+primitive $05 ;; 10r05 Array at:put: i(point addr value -- addr)
	+ipop
	INC
	ASL
	TAY
	+ipop
	STA RA
	+ipop
	STA (RA),Y
	LDA RA
	+ipush
	JMP PRIMDONE

P_NEWOBJ:
	+next P_ATPUT
	+primitive $07 ;; 10r07 new object allocation i(size class -- object)
	JSR GCALLOC	;; (size -- object)
	JSR SETCLASS	;; (object class -- object)
	JMP PRIMDONE


P_GETCH:
	+next P_NEWOBJ
	+primitive $09 ;; get a character
	JSR CHIN
	+long
	AND RAMASK
	+ipush
	JMP PRIMDONE

P_PLUS:
	+next P_GETCH
	+primitive $0A ;; 10r10 small integer addition (a b -- a+b)
	+ipop
	STA RA
	+ipop
	CLC
	ADC RA
	+ipush
	JMP PRIMDONE

P_BYTESALLOT:
	+next P_PLUS
	+primitive $14 ;; 10r20 byteArray alloc i(size class -- addr)
	JSR GCIALLOC
	JSR SETCLASS
	JMP PRIMDONE

P_STRAT:
	+next P_BYTESALLOT
	+primitive $15 ;; string at: (point addr -- value)
	+ipop
	DEC ;because yeah arrays start a 1
	INC ; skip 4 byte header
	INC
	INC
	INC
	TAY
	+ipop
	STA RA
	LDA (RA),Y
	AND RAMASK
	+ipush
	JMP PRIMDONE

P_STRATPUT:
	+next P_STRAT
	+primitive $16 ;; String at:put: (point addr value -- addr)
	+ipop
	DEC ; see previous
	INC ; skip 4 byte header
	INC
	INC
	INC
	TAY
	+ipop
	STA RA
	+ipop
	+short
	STA (RA),Y
	+long
	LDA RA
	+ipush
	JMP PRIMDONE

P_STRCLONE:
	+next P_STRATPUT
	+primitive $17 ;; 10r23 string clone (class string -- clone)
	+ipop
	PHA	;; save the class
	+ipop
	PHA	;; save the original
	;; now we have r(string class)
	STA RA
	LDA (RA)	;; get the size
	TAY
	BMI +		;; is a bytestring
			;; not a bytestring
	+ipush
	JSR GCALLOC	;; i(size -- addr)
	TYA		;; copy n words
	ASL
	TAY
	BRA .COPY

+	+const $8000	;; clear the byte flag
	EOR (RA)
	TAY
	+ipush
	JSR GCIALLOC ;; i(size -- addr)
		;; i(clone) RA = clone RW = ipc r(string class)
.COPY:	+ipop
	STA RA	;; i(--) RA = clone RW = ipc r(string class)
	LDA RW
	+ipush
	PLA
	STA RW	;; i(ipc) RA = clone RW = string  r(class)

	;; add 4 byte header
	;;INY ;; not this one
	INY
	INY
	INY
	SEP #$20	;; short A
-	LDA (RW),Y
	STA (RA),Y
	DEY
	BNE -
	LDA (RW)	;; copy final word
	STA (RA)
	;; now undo
	REP #$20	;; long A
	+ipop
	STA RW
	PLA ;; class
	+ipush		;; i(class)
	LDA RA ;; clone
	+ipush		;; i(clone class)
	JSR SETCLASS
	JMP PRIMDONE

P_ARAT:
	+next P_STRCLONE
	;; <10r24 self index> but the args are on stack right to left
	+primitive $18 ;; 10r24 Array at: $D2 $18 i(index self -- value)
	+ipop		;; index (starts at 1)
	INC		;; skip class in header
	ASL		;; word address
	TAY
	+ipop		;; self
	STA RA
	LDA (RA),Y
	+ipush
	JMP PRIMDONE

P_BLIT:
	+next P_ARAT
	+primitive $30 ;; 10r48 blit $D5 $30 i(src sbank dest dbank count --)
	+long
	+ipop
	STA RA
	+ipop
	STA RA+2
	LDA RW
	PHA
	LDA RW+2
	PHA
	+ipop
	STA RW
	+ipop
	STA RW+2
	+ipop
	TAY
	DEY
	DEY
-	LDA [RA],Y
	STA [RW],Y
	DEY
	BPL -

	PLA
	STA RW+2
	PLA
	STA RW
	JMP PRIMDONE



P_OBJCLONE:
	+next P_BLIT
	+primitive $31 ;; 10r49 OBJCLONE (src sbank dest dbank -- )
	LDA RIV
	PHA
	+ipop
	STA RIV
	+ipop
	STA RIV+2
	+ipop
	STA RA
	+ipop
	STA RA+2
	LDA RIV+2	;; source data bank in A
	+dbr_begin	;; set DBR
	LDA (RIV)	;; get the size
	ASL
	TAY
-	LDA (RIV),Y
	STA [RA],Y
	DEY
	DEY
	BNE -
	+dbr_end	;; restore DBR
	PLA
	STA RIV
	JMP PRIMDONE

	KA = RA+2
P_KEYSTONE:
	+next P_OBJCLONE
	+primitive $32 ;; 10r50 KEYSTONE (dest bytes -- ) D2 32
	+ipop		;; i(bytes)
	STA KA		;; dest address (register)
	+ipop
	STA RA
	LDA (RA)
	BPL .nope	;; must by a byte array
	INC RA		;; skip to the data
	INC RA
	INC RA
	INC RA
	AND $0FFF	;; $00FF
	SEP #$20	;; short A
	STA RIV+3	;; hold that
	LDA #$00
	TAY

-	STA (KA)	;; set register address
	LDA (RA),Y
	INC KA
	STA (KA)	;; set register value
	DEC KA
	INY
	TYA
	CMP RIV+3
	BNE -

	+long
.nope:
	JMP PRIMDONE

P_PROCSET:
	+next P_KEYSTONE
	+primitive $40 ;; 10r64 PROCSET (status --) D1 40
	+ipop
	STA RPS
	JMP PRIMDONE

PRIMAX:
	+next P_PROCSET
