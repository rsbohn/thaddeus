;; Little Smalltalk memory management
;; from Budd 1983, Little Smalltalk v4
	!cpu 65816

	;;;; Memory Map: Pluton/Zero
	;; memory region 0a: $00:0000 to $00:07FF
	;; -- process and context
	;; each process has a private direct page
	;; context is loaded into the process as needed
	;; memory region 0b: $00:0800 to $00:09FF
	;; -- IO Space
	;; memory region 0c $00:1000 to $00:6FFF
	;; -- 24K ?? Could be for static allocation
	;; memory region 0d: $00:7000 to $00:7FFF
	;; -- 4K stack (wow that's big)
	;; memory region 1a: $00:8000 to $00:EFFF
	;; -- 28K object store
	;; memory region 1b: $00:F000 to $00:FFFF
	;; -- 4K ROM monitor and Smalltalk VM/bytecode interpreter

	PMEM = $EF00	;; pointer to available memory
	PSYM = $6F00	;; pointer to available symbol
MZERO:	!word $8000	;; where the actual store starts
M_TOP:	!word PMEM-2
SZERO:	!word $4000	;; where symbol table starts
S_TOP:	!word PSYM-2

FBIN:	!word $8000	;; marks memory object as binArray
	
	GLOBAL = $EF02
MSTART:
	+long
	LDA MZERO
	STA PMEM
	LDA SZERO
	STA PSYM
	+const ($F000-GLOBAL-4)/2
	STA GLOBAL
	+const GLOBAL
	STA GLOBAL+2
	RTS

MEM_EXHAUSTED:
	JSR PRINTME
	!raw "Out of memory.", $00
-	BRA -

GCALLOC:	;; i(size -- addr) size is WORDS
	LDA PMEM
	STA RA
	+ipop
	STA (RA)	;; set the size
	INC		;; size goes here
	INC		;; *class goes here

	ASL		;; *2 to allocate words
	CLC
	ADC PMEM

	CMP M_TOP
	BMI +
	JMP MEM_EXHAUSTED
+	STA PMEM
	LDA RA
	+ipush
	RTS

GCIALLOC:	;; i(size -- addr) size is BYTES
	LDA PMEM
	STA RA
	+ipop
	EOR FBIN
	STA (RA)
	EOR FBIN
	CLC
	ADC PMEM
	INC		;; size
	INC
	INC		;; *class
	INC
	CMP M_TOP
	BMI +
	JMP MEM_EXHAUSTED
+	STA PMEM
	+const $0001	;; word align
	BIT PMEM
	BEQ +
	INC PMEM
+	LDA RA
	+ipush
	RTS

SETCLASS:	;; i(object class -- object)
	+ipop
	PHA
	INC
	INC	;; now A has object->class addr
	STA RA
	+ipop
	STA (RA)
	PLA
	+ipush
	RTS

INTERN:		;; i(string -- symbol)	add string to symbol table
	+ipeek
	JSR STR_HASH
	PHA
	LDA PSYM
	STA RA
	+ipop
	STA (RA)
	INC RA
	INC RA
	+ipop
	STA RA
	PLA
	+ipush
	RTS

STR_HASH:	;; i(string -- hash)
	+ipop
	STA RA
	+const $007F
	AND (RA) ;; get size
	TAY
-	BEQ +
	ADC (RA),Y
	DEY
	BNE -
+	+ipush
	RTS
	
;; It's plot exposition. It has to go somewhere. --Lady Holiday
MAKECONTEXT:	;; i(args temps -- context)
	+const $0005
	+ipush
	JSR GCALLOC
	;; i(context args temps)
	;; [size] [class] [method] [args] [temps] [stack] [previous]
	+ipop
	STA RA
	+const $0006
	TAY
	+ipop
	STA (RA),Y
	+ipop
	INY
	INY
	STA (RA),Y
	+const $0080
	INY
	INY
	STA (RA),Y
	LDA RA
	+ipush
	RTS

SETMETHOD:	;; i(method context -- )
	;; find the method
	;; receiver = context->args[0]
	;; methods = receiver->class
	;; scan methods for my method
	;; if found: context[0] = method
	;; if not: scan superclass
	;; if no superclass: fail NoSuchMethod
	
