;; 65816 memory size macros
;; suggested that you not use immediate addressing mode
!macro short {
	SEP #$30
}

!macro long {
	REP #$30
}

!macro const .n {
	LDA+2 #.n
}
;; or perhaps 
;; !byte $A9, <.n, >.n
;; or even
;; php
;; !short
;; lda >.n
;; exb
;; lda <.n
;; plp

!macro incr .it {
	CLC
	INC .it
	BCC +
	INC .it+1
+
}

!macro byteAt .point, .addr {
	+short
	PHX
	LDX .point
	LDA .addr,X
	PLX
}
!macro byteAtPut .point, .addr {
	+short
	PHX
	LDX .point
	STA .addr,X
	PLX
}

;; convert ordinal offset to a cell offset
!macro cells {
	ASL
}

;; push A to the interpreter stack (RS)
;; this is a word stack
;; stack grows upward
!macro ipush {
	STA (RS)
	INC RS
	INC RS
}

!macro ipop {
	DEC RS
	DEC RS
	LDA (RS)
}
!macro idrop {
	DEC RS
	DEC RS
}

!macro ipeek {
	LDA RS
	STA RA
	DEC RA
	DEC RA
	LDA (RA)
}

;; begin code section in a new data bank
;; desired bank in register A
		;; DBR=T A=0V
!macro dbr_begin {
	+long
	PHA	;; r(V 0)
	PHB	;; r(T V 0)
	PLA	;; A=TV
	XBA	;; A=VT
	PHA	;; r(V T 0)
	PLB	;; DBR=V r(T 0)
}


;; now the new data bank is active. Be careful!

		;; DBR=V r(T 0)
!macro dbr_end {
	PHB	;; r(V T 0)
	PLA	;; A=VT
	XBA	;; A=TV
	PHA	;; r(T V 0)
	PLB	;; DBR=T r(V 0)
	PLA	;; A=0V
}

;; allows modification of the current process
!macro in_proc {
	PHD	;; current process (direct page)
	PLA
	STA RIV
}
;; restore RIV from context->args[0]->ivars
;; context . receiver . instance variables
!macro in_context {
	CLC
	+const $0006	;; context.args
	ADC CONTEXT
	STA RA
	CLC
	+const $0004	;; args[0]
	ADC (RA)
	STA RA
	LDA (RA)	;; ivars
	STA RIV
}

;; add top of i-stack to A register
!macro iplusA {		;; i(n -- ), A=A+n
	DEC RS
	DEC RS
	CLC
	ADC (RS)
}
