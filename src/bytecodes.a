;; Little Smalltalk bytecodes
;; from Budd 1983, Little Smalltak v4

	!cpu 65816

	;; RA scratch $00
	;; RW byteCode pointer $04
	;; RS instance stack pointer $08
	RPS = $0C	;; process status
	RPN = $0E	;; next process
	RIV = $10
	RCA = $14	;; args
	RCT = $16	;; temporaries
	RCC = $18	;; context literals
	RCX = $20	;; context
	RCM = $22	;; method

	PFSLEEP = $00
	PFRUN	= $01
	PFPRETEXT = $02
	PFTERMINAL= $08
.BCTAB:
	!word BC_EXTD		;; 00
	!word BC_IVAR
	!word BC_ARG
	!word BC_TVAR
	!word BC_LITERAL	;; 04
	!word BC_CONSTANT
	!word BCIVAR_
	!word BCTVAR_
	!word BC_MARK		;; 08
	!word BC_SEND
	!word BC_SEND1
	!word BC_SEND2
	!word BC_PUSHBLOCK	;; 0C
	!word BC_PRIMITIVE
	!word BC0E
	!word BC_SPECIAL

;; current instruction is in RW $14
.BCMASK:
	!word %0000000011110000
BVMASK:
	!word %0000000000001111
RAMASK: !word $00FF

	* = $F400
BCDO:			;; take next bytecode
			;; (bytecode nextbyte -- codeptr value)
	+short
	LDA #PFPRETEXT	;; is this a new context?
	BIT $0C
	BNE PROCFILL

	LDA #PFRUN	;; is this process runnable?
	BIT $0C
	BEQ .BCNEXT	;; nope

	+long
	LDA (RW)
	AND .BCMASK
	BNE +		;; is it EXTD?
	LDA (RW)	;; bytecode is AL value is B
	XBA
	AND RAMASK
	PHA		;; push 8 bit 'value'
	LDA (RW)
	+incr RW	;; skip value byte
	AND BVMASK
	ASL		;; *2 produces the table offset
	BRA .EXTD

+	LDA (RW)	;; bytecode is AH value is AL
	AND BVMASK
	PHA		;; push 4 bit 'value'

	LDA (RW)
	AND .BCMASK	;; select bytecode
	LSR		;; // 8 produces the table offset
	LSR
	LSR

.EXTD	TAX		;; code offset in A
	LDA .BCTAB,X
	PHA		;; push codeptr
;;;;;;;;;;;;;;;;;;;;;
.DEBUG:
	LDA RW
	JSR DBHEX
	+long
	LDA (RW)
	JSR DBHEX
	JSR DBNL
	+long
;;;;;;;;;;;;;;;;;;;;;
	+incr RW	;; advance instruction pointer
.BCJUMP:
	PLA
	STA EV
	PLA
	JMP (EV)

.BCNEXT:
	+long
	LDA $0E		;; go to the next process
	TCD
	BRA BCDO
.BCNEXT2:		;; a more convenient breakpoint
	BRA .BCNEXT

PROCFILL:
	+long
	+const $0000+4	;; context[method]
	TAY
	LDA (RCX),Y
	STA RCM

	+const $0002+4	;; context[args]
	TAY
	LDA (RCX),Y
	STA RCA

	+const $0004+4	;; context[temps]
	TAY
	LDA (RCX),Y
	STA RCT

	+const $0006+4	;; context[stack]
	TAY
	LDA (RCX),Y
	STA RS

	+const $0004+4	;; method[literals] to RCC
	TAY
	LDA (RCM),Y
	STA RCC

	+const $0002+4	;; method[byteCodes]
	TAY
	LDA (RCM),Y
	STA RA
	+const $0004
	CLC
	ADC RA		;; add RA not (RA)
	STA RW

	+const PFRUN
	STA RPS
	JMP .BCNEXT	;; ready to run
BC_EXTD: ;; 0X shouldn't happen
	;; this is handled above
	BRA BC_EXTD

BC_IVAR: ;; 1X push instance variable
	INC		;; skip the header
	INC
	+cells
	TAY
	LDA [RIV],Y
	+ipush
	JMP .BCNEXT

BC_ARG: ;; 2X push argument from context
	INC		;; skip the header
	INC
	+cells
	TAY
	LDA (RCA),Y
	+ipush
	JMP .BCNEXT

BC_TVAR: ;; 3X push temp variable from context
	INC		;; skip the header
	INC
	+cells
	TAY
	LDA (RCT),Y
	+ipush
	JMP .BCNEXT

BC_LITERAL: ;; 4X push literal from 'interpreter'
	;; literals from source code are kept apart from bytecode
	INC		;; skip the header
	INC
	+cells
	TAY
	LDA (RCC), Y
	+ipush
	JMP .BCNEXT

;;;;;;;;;;;;;;;;;;;;
	O_SMALLTALK = $EF02
	O_THISPROC = $00F8
.BC5TAB:
	!word $0000, $0001, $0002, $0003
	!word $0004, $0005, $0006, $0007
	;; 8 9 -1 o_true
	!word $0008, $0009, $FFFF, KTRUE
	;; o_false o_nil o_smalltalk o_thisproc
	!word KFALSE, KNIL, O_SMALLTALK, O_THISPROC
.BC5MAX:
	!word $0010
.BC5TABP:
	!word .BC5TAB
;;;;;;;;;;;;;;;;;;;;

BC_CONSTANT: ;; 5X Push a special constant 0-9,-1,true,false,nil,smalltalk,thisproc
	CMP .BC5MAX
	BCC +
	JMP .BCFAIL	;; we don't handle >= $10 (yet)
	;; map A to .BCTAB
+	+cells
	CLC
	ADC .BC5TABP
	STA RA
	LDA (RA)
	+ipush
	JMP .BCNEXT

	.ARGS = $2E
BC_PUSHBLOCK:		;; CX <addr> i(-- block) r(prevContext --)
	;; need to get prevContext from RCX[prevContext]
	;; I'm not putting it on the r-stack.
	STA .ARGS	;; stash 'args location'
	;;; push context to return stack (in case of garbage collection)
	;;; ??? in case the current context moves but we keep the original???
			;alloc stack
	+const $0020
	+ipush
	JSR GCALLOC	;; i(stack )
			;alloc Block
	+const $000A
	JSR GCALLOC	;; i(block stack )

	+ipop
	STA RA
	+const $0004	;; now fill in block variables
	TAY
	LDA (RCX),Y	;; method
	STA (RA),Y
	INY
	INY
	LDA .ARGS	;; args
	STA (RA),Y
	INY
	INY
	LDA RCT		;; temps
	STA (RA),Y
	INY
	INY
	+ipop		;; stack
	STA (RA),Y
	INY
	INY
	+const $0000	;; stackTop
	STA (RA),Y
	INY
	INY
	STA (RA),Y	;; prev context
	INY
	INY
	LDA .ARGS	;; args
	STA (RA),Y
	INY
	INY
	LDA RCX		;; yes unless context itself is a block
	STA (RA),Y
	INY
	INY
	LDA (RW)
	STA (RA),Y

	LDA RA
	+ipush

	;init block bytePointer, stackTop, previousContext = NULL
	;block[bytePointerInBlock] = newInteger(bytePointer);
	;block[argLocationInBlock] = newInteger(RA);
	;block[stack] = pop from return stack
	;;; pop context from return stack
	;if currentContext is a block: block[parent]=context[parent]
	;if not: block[parent]=context
	;method=block[method]=context[method]
	;args=block[args]=context[args]
	;temps=block[temps]=context[temps]
	;stack=context[stack]
	;bp=bytePtr(method[byteCodes])
	;push block
	;literals = instanceVariables = 0;
	;set bytePointer from byteCodes

	INC RW
	INC RW
	JMP .BCNEXT

BCIVAR_: ;; 6X i-stack to instance variable [RIV]
	INC		;; skip the header
	INC
	+cells
	TAY
	+ipop
	STA [RIV], Y
	JMP .BCNEXT

BCTVAR_: ;; 7X i-stack to temporary (RCT)
	INC		;; skip the header
	INC
	+cells
	TAY
	+ipop
	STA (RCT), Y
	JMP .BCNEXT

BC_MARK: ;; 8X MarkArguments (from i-stack to a new Array)
	;; collect (low) arguments from stack into an array
	+ipush		;; i(n ...)
	PHA		;; r(n) i(n ...)
	+const $C00A
	+ipush		;; i(Array n ...)
	PLA		;; r()
	+ipush		;; i(n Array n ...)
	JSR GCALLOC	;; i(args Array n ...)
	JSR SETCLASS	;; i(args n ...)
	PHA		;; r(args)

	+const $0004
	+iplusA
	STA RA		;; now RA = args[data]
	+ipop	;; A=n
	DEC	;; because arrays start at 1
	+cells	;; Y needs to count bytes
	TAY
	;; pop arguments from stack
-	+ipop
	STA (RA),Y
	DEY
	DEY
	BPL -
	;; push arguments 
	PLA
	+ipush		;; i(args)
	JMP .BCNEXT


BC_SEND: ;; 9X X=message i(args)
	PHA		;; save 'message'
	LDA RCX
	+ipush		;; i(context args)
	+const $C00C	;; Context
	+ipush		;; i(Context context args)
	+const $0007
	+ipush		;; i(size Context context args)
	JSR GCALLOC
	JSR SETCLASS	;; i(newContext context args)

	+ipop		;; i(context args)
	STA RCX		;; RCX is now the new context!
	+const $000C+4	;; context[previousContext]
	TAY
	+ipop		;; i(args)
	STA (RCX),Y

	+const $0002+4	;; context[args]
	TAY
	+ipeek
	STA (RCX),Y
	+const $0004	;; args->data
	CLC
	ADC (RCX),Y
	STA RCA		;; switch to new args
;;; make sure .RETURN restores this.

	;; messageSelector = RCA[message] -- zero based
	PLY		;; retrieve 'message' from r()
	LDA (RCA),Y	;; messageSelector=literals[message]
	PHA		;; r(messageSelector)
	+ipeek		;; args
	STA RA
	+const $0000+4
	TAY
	LDA (RA),Y	;; receiver
	;; method = lookupMethod(messageSelector, receiverClass)
	+ipush
	PLA
	+ipush		;; i(messageSelector receiverClass args)
	JSR MLOOKUP	;; i(method args)
	STA RA		;; copy of 'method' in RA

	+const $C00A	;; Array
	+ipush		;; i(Array method args)
	+const $0004+4	;; method[tempSize]
	TAY
	LDA (RA),Y
	+ipush		;; i(tempSize Array method args)
	JSR GCALLOC	;; i(temps Array method args)
	JSR SETCLASS	;; i(temps method args)

	+const $0004+4	;; context[temporaries]
	TAY
	+ipop		;; A=temps i(method args)
	STA (RCX),Y

	+const $0000+4	;; context[method]
	TAY
	+ipop		;; A=method i(args)
	STA (RCX),Y

	+const $0002+4	;; context[args]
	TAY
	+ipop		;; A=args i()
	STA (RCX),Y


	;; set stackTop in context
	+const $000A+4
	TAY
	+const $0000
	STA (RCX),Y

	;; set bytePointer in context
	+const $0008+4
	TAY
	+const $0000
	STA (RCX),Y

	;; set the stack in context
	+const $0006+4
	TAY
	+const $0090	;; this should be elsewhere, 
			;; or copy stack and stackTop from current context
	STA (RCX),Y

	+const PFPRETEXT
	STA RPS
	JMP .BCNEXT2	;; allow break on SEND

BC_SEND1: ;; AX 
BC_SEND2: ;; BX
	JMP .BCFAIL

BC_PRIMITIVE: ;; DX call a primitive function
	JSR PRIMDO
	JMP .BCNEXT
BC0E:	;; EX Not Used
	JMP .BCFAIL

!macro cx_prev {
	+const $000C+4	;; context[previousContext]
	TAY
	LDA (RCX),Y
	STA RCX		;; back to previousContext
}

BC_SPECIAL: ;; FX special functions
	;; action is based on value (A register)
	STZ RA
	INC RA	;; Special $01 SelfReturn
	CMP RA
	BNE +
	;; self return
	+const $0000+4	;; receiverInArguments
	TAY
	LDA (RCA),Y
	PHA
	+cx_prev
	JMP .RETURN
+	INC RA	;; Special $02 StackReturn
	CMP RA
	BNE +
	;; stack return
	+ipop
	PHA
	+cx_prev
	JMP .RETURN
+	INC RA ;; Special $03 BlockReturn
	CMP RA
	BNE +
	;; block return
	+ipop
	PHA
	;;;; return to creatingContext -> previousContext
	+const $0002+4	;; block[creatingContext]
	TAY
	LDA (RCX),Y	;; in this case RCX is a block
	STA RCX
	+cx_prev	;; get prev of creatingContext
	JMP .RETURN

.RETURN:
	;; RCX is now the previous context
	;; if context == 0 || context == nilObject: allDone
	BEQ .TERMINAL
	+const KNIL
	CMP RCX
	BEQ .TERMINAL
	;; if not:
	;; push returnValue on istack
	+const $000A+4	;; context[stackTop]
	TAY
	LDA (RCX),Y
	STA RS
	PLA
	+ipush		;; i(returnValue)
	;; set RCM from prevcx
	+const $0000+4	;; context[method]
	TAY
	LDA (RCX),Y
	STA RCM
	;; restore RW from prevcx[bytePointer]
	+const $0008+4	;; context[bytePointer] -- should be set in SEND
	TAY
	LDA (RCX),Y
	STA RW
	;; what about the other process vars?
	JMP .BCNEXT2

.TERMINAL:
	;; this process is done but there may be others.
	;; maybe add code to remove PFTERMINAL processes from the loop.
	+const PFTERMINAL
	STA RPS
	JMP .BCNEXT2

+	INC RA ;; Special $04 Duplicate
	CMP RA
	BNE +
	;; duplicate
	+ipeek
	+ipush
	JMP .BCNEXT
+	INC RA ;; Special $05 PopTop
	CMP RA
	BNE +
	;; PopTop aka drop
	DEC RS
	DEC RS
	JMP .BCNEXT

+	INC RA ;; Special $06 Branch
	CMP RA
	BNE +
	;; branch relative byteCodes start
ESP6:	+const $0006
	TAY
	LDA (RCM),Y	;; method[byteCodes]
	+ipush
	+const $0004	;; skip the header
	+iplusA
	+ipush
	LDA (RW)
	;; A+i[0]
	+iplusA
	STA RW
	JMP .BCNEXT2

+	INC RA	;; Special $07 BranchIfTrue
	CMP RA
	BNE +
	;; branch if true
	+ipop
	CMP KTRUE
	BNE .SKIP
	LDA (RW)
	STA RW
	JMP .BCNEXT
+	INC RA	;; Special $08 BranchIfFalse
	CMP RA
	BNE +
	;; branch if false
	+ipop
	CMP KFALSE
	BNE .SKIP
	LDA (RW)
	STA RW
	JMP .BCNEXT
.SKIP:
	;; do not branch -- skip the failed branch address
	INC RW
	INC RW
	JMP .BCNEXT

+	INC RA	;; Special $09 SendToSuper
	INC RA	;; Special $0A Breakpoint
	INC RA	;; OOPS
	BRK 
	BRK
	BRA .BCFAIL

.BCFAIL:
	BRA .BCFAIL

MLOOKUP:	;; i(selector receiver args -- method args)
	;; selector can be an actual method
	;; OR a symbol that we have to look up
	;; placeholder implementation
	+ipop
	STA RCM
	+ipop
	STA RA

	;; is it a Method?
	+const $0002
	TAY
	+const $C00D
	CMP (RCM),Y
	BNE .SYMBOL
	LDA RCM
	+ipush
	RTS
.SYMBOL
	;; trap: not implemented
	BRA .SYMBOL

C_ARRAY:	!word $C00A
C_BYTES:	!word $C00B
C_CONTEXT:	!word $C00C
C_METHOD:	!word $C00D
BCBOOT:	;; set up the VM, run user code or BOOTSECTOR
	+long
	+const KNIL	;; fix constants -- maybe should be in ROM?
	STA KNIL
	+const KFALSE
	STA KFALSE
	+const KTRUE
	STA KTRUE

	+const $0080	;; start with the stack
	STA RS
	+const KNIL
	+ipush		;; i(receiver)
	STA RCX
	;; Do we have a Method object at $1000?
	+const $1000
	STA RCM
	+const $0002
	TAY
	+const $C00D	;; Method?
	CMP (RCM),Y
	BEQ +
	+const BOOTMETHOD
	STA RCM

+	LDA RCM
	+ipush		;; i(selector receiver)

	+const .ORIGIN
	STA RW
	+const $0001
	STA RPS
	JMP BCDO

.ORIGIN			;; first bytecodes to run
	!hex 8292F100
	;; BC_MARK(2) -- preloaded on i-stack above
	;; BC_SEND
	;; Return Self --> .TERMINAL

!zone bootsector {
BOOTMETHOD:
	!word $0007
	!word $C00D
	!word .BOOT	;; method name
	!word .BCODE	;; byteCodes
	!word .LITERALS
	!word $0010	;; stackSize
	!word $0010	;; temporarySize
	!word $0000	;; class of method (nil)
	!word .BOOT	;; 'text' of method
.BOOT:
	!word $8004	;; size
	!word $C010	;; String
	!raw "boot"
.BCODE:
	!word $0006
	!word $C00B		;; ByteArray
	!byte $50, $D1, $40	;; idle
	!byte $F6, $00, $00	;; repeat
.LITERALS:
	!fill $10, $00
.ARGS:
	!word $0003
	!word $C00A	;; Array
	!word $0000
	!word $0001
	!word $0002
}
