;; Little Smalltalk bytecodes
;; from Budd 1983
	!cpu 65816
	* = $F800

	;; RA scratch $00
	;; RB -> code literals $04
	;; RC -> method args, temps $08
	;; RD -> instance vars $0C
	;; RS -> interpreter stack pointer $10
	;; RW -> current bytecode $14
BCTAB:
	!word BC_EXTD
	!word BC_IVAR
	!word BC_ARG
	!word BC_LIT
	!word BC_CLASS
	!word BC_LSPEC
	!word BCIVAR_
	!word BCTEMP_
	!word BC_MSG
	!word BC_SUPER
	!word BC0A
	!word BC0B
	!word BC0C
	!word BC0D
	!word BC0E
	!word BC_SPECIAL

;; current instruction is in RW $14
BCMASK:
	!word %0000000011110000
BVMASK:
	!word %0000000000001111
RAMASK: !word $00FF

BCDO:			;; take next bytecode
			;; (bytecode nextbyte -- codeptr value)
	+long
	LDA (RW)
	AND BCMASK
	BNE +		;; is it EXTD?
	LDA (RW)	;; bytecode is AL value is B
	XBA
	AND RAMASK
	PHA		;; push 8 bit 'value'
	LDA (RW)
	+incr RW	;; skip value byte
	AND BVMASK
	ASL		;; *2 produces the table offset
	BRA .EXTD

+	LDA (RW)	;; bytecode is AH value is AL
	AND BVMASK
	PHA		;; push 4 bit 'value'

	LDA (RW)
	AND BCMASK	;; select bytecode
	LSR		;; // 8 produces the table offset
	LSR
	LSR

.EXTD	TAX		;; code offset in A
	LDA BCTAB,X
	PHA		;; push codeptr
	+incr RW	;; advance instruction pointer

BCJUMP:
	PLA
	STA RA
	PLA
	JMP (RA)

BCNEXT:	BRA BCDO

BC_EXTD:
	;; can't happen
	;; this is handled above
	BRA BC_EXTD

BC_IVAR:
	;; push instance variable
	+cells
	TAY
	LDA [RD],Y
	+ipush
	JMP BCNEXT

BC_ARG:
	;; push context value -- argument or temp variable
	;; parser makes this work by putting temp after args
	+cells
	TAY
	LDA [RC],Y
	+ipush
	JMP BCNEXT

BC_LIT:
	;; push literal from 'interpreter'
	;; literals from source code are kept apart from bytecode
	+cells
	TAY
	LDA [RB], Y
	+ipush
	JMP BCNEXT

BC_CLASS:
	;; given a class SYMBOL 
	;; resolve the class, then push to the istack
	BRA BC_CLASS

;;;;;;;;;;;;;;;;;;;;
BC5TAB:
	!word $0000, $0001, $0002, $0003
	!word $0004, $0005, $0006, $0007
	;; 8 9 -1 o_true
	!word $0008, $0009, $FFFF, $00F2
	;; o_false o_nil o_smalltalk o_thisproc
	!word $00F0, $00F4, $00F6, $00F8
BC5MAX:
	!word $0010
BC5TABP:
	!word BC5TAB
;;;;;;;;;;;;;;;;;;;;

BC_LSPEC:
	CMP BC5MAX
	BCC +
	JMP BCFAIL	;; we don't handle >= $10 (yet)
	;; map A to BCTAB
+	+cells
	CLC
	ADC BC5TABP
	STA RA
	LDA (RA)
	+ipush
	JMP BCNEXT
	
BCIVAR_:
	;; pop, store in instance variable
	+cells
	TAY
	+ipop
	STA [RD], Y
	JMP BCNEXT

BCTEMP_:
	+cells
	TAY
	+ipop
	STA [RC], Y
	JMP BCNEXT

BC_MSG:
BC_SUPER:
BC0A:
BC0B:
BC0C:
BC0D:
BC0E:
BC_SPECIAL:

BCFAIL:
	BRA BCFAIL
