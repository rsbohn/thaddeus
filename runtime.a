;; Thaddeus Runtime
;; A Little Smalltalk system
;; Copyright (c) Randall Bohn 2019
;; 2019 0724
;; MIT License: see LICENSE file
;; $ acme runtime.a
	!to "runtime.bin", plain

	* = $1000

boot:	!word FIN-$1000
	!word $C00A
	!word Runtime
	!word starter

	Nil = $EFF0
;; This is the new Application.
!zone starter {
starter:
	!word $0007
	!word $C00D
	!word .name
	!word .code
	!word .literals
	!word $0010
	!word $0010	;; tempSize
	!word Runtime
	!word Nil
.name
	!word $8007
	!word $C010
	!raw "starter"
	!align 1,0
.literals
	!word $0008
	!word $C00A
	!word setup
	!word loop
	!word .sargs
	!word .largs
	!word $0000
	!word $0000
	!word $0000
	!word $0000
.code
	!word $8009
	!word $C00B
	!hex 4290F5
	!hex 4391F5
	!hex F60300
	!align 1,0
.sargs
	!word $0001
	!word $C00A
	!word $8000	;; starter temps array is the receiver
	!word $0060
.largs
	!word $0002
	!word $C00A
	!word $8000	;; starter temps array is the receiver
}

!zone runtime {
Runtime:
	!word $0008
	!word $C00A	;; Runtime is just an array
	!word $8080
	!word $8090
	!word $0000
	!word $0000
	!word $0000
	!word $0000
	!word $0000
	!word $0000
}

!zone fork {
fork:	;; fork: method with: args in: directPage
	;; allocates context on heap
	!word $0007
	!word $C00D
	!word .name
	!word .code
	!word .literals
	!word $0010
	!word $0001
	!word Runtime
	!word Nil
.name
	!word $800B
	!word $C010
	!raw "fork:with:in:"
	!align 1,0
.literals
	!word $0005
	!word $C00A
	!word $C00C
	!word $0090
	!word $000F
	!word $8000
	!word $0015
.code
	!word $8024
	!word $C00B
	;; t0 := Context new
	!hex 4057D20770
	;; set method
	!hex 213051D305F5
	;; set args
	!hex 223052D305F5
	;; set temporaries? YAGNI
	!hex 5D3053D305F5
	;; set stack
	!hex 2341D20A3054D305F5
	;; set bytePointer
	!hex 503055D305F5
	;; set stack top
	!hex 503056D305F5
	;; set previousContext to Nil
	!hex 5D3057D305
	;; prepare process page
	;; set context
	!hex 2342D305F5
	;; set debug output
	!hex 432344 D305F5
	;; set process flags
	!hex 522355D305F5
	;; add new process to list of processes
	!hex 235056D305F5
	!hex F1
	!align 1,0
}

!zone setup {
setup:
	!word $0007
	!word $C00D
	!word .name
	!word .code
	!word .literals
	!word $0010
	!word $0000
	!word Runtime
	!word Nil
.name
	!word $8005
	!word $C010
	!raw "setup"
	!align 1,0
.literals
	!word $0004
	!word $C00A
	!word Runtime	;; 40
	!word .args
	!word $0003
	!word putString
	!word fork	;; 94
	!word .a1
.code
	!word $8008
	!word $C00B
	!hex 4193F5	;; putString pztag
	!hex 4594F5	;; fork second process
	!hex F1
	!align 1,0
.args
	!word $0003
	!word $C00A
	!word Runtime
	!word pztag
	!word $0000
.a1			;; fork: method with: args in: page
	!word $0004
	!word $C00A
	!word Runtime	;; receiver
	!word ticker	;; method
	!word .a2	;; ticker args
	!word $0100	;; page
.a2
	!word $0004
	!word $C00A
	!word Runtime
	!word $00C0	;; count for ticker
}

!zone loop {
loop:
	!word $0007
	!word $C00D
	!word .name
	!word .code
	!word .literals
	!word $0010
	!word $0000
	!word Runtime
	!word Nil
.name
	!word $8004
	!word $C010
	!raw "loop"
.literals
	!word $0004
	!word $C00A
	!word .jk
	!word jingle
	!word .scargs
	!word scroll
.code
	!word $8020
	!word $C00B
	!hex 4091F5	;; jingle
	!hex 4293F5	;; scroll
	!hex 54D140	;; suspend
	!hex 4091F5	;; jingle
	!hex 54D140	;; suspend
	!hex 4091F5	;; jingle
	!hex 54D140	;; suspend
	!hex 4091F5	;; jingle
	!hex 54D140	;; suspend
	!hex F1
	!align 1,0
.jk
	!word $0001
	!word $C00A
	!word Runtime
.scargs
	!word $0001
	!word $C00A
	!word $8000
}

!zone scroll {
scroll:
	!word $0007
	!word $C00D
	!word .name
	!word .code
	!word .literals
	!word $0010
	!word $0000
	!word Runtime
	!word Nil
.name
	!word $8006
	!word $C010
	!raw "scroll"
.literals
	!word $0004
	!word $C00A
	!word .psargs
	!word $001F
	!word putString
	!word $00F8	;; line 3 col 8
	!word pztag	;; 44
	!word blanks
	!word ticker
	!word messages
	!word $0020	;; 48 lcd width
	!word $0050	;; screen width
	!word $00E0	;; 4A message mask
.code
	!word $8024
	!word $C00B
	;; first calculate the destination
	!hex 2043D20A63	;; store $8000 in RIV[3]
	;; <blit _src_ sbank dest dbank count>
	!hex 485113501447D20AD530

	!hex 1349D20A63	;; next row
	!hex 1448D20A4AD22564	;; next message
	!hex 485113501447D20AD530

	!hex 1349D20A63	;; next row
	!hex 1448D20A4AD22564	;; next message
	!hex 485113501447D20AD530

	!hex 1349D20A63	;; next row
	!hex 1448D20A4AD22564	;; next message
	!hex 485113501447D20AD530

	;; now back up 2 messages for the next iteration
	;; @B W W + - M & !
	!hex 144848D20AD2104AD22564
	!hex F1
	!align 1,0
.psargs
	!word $0003
	!word $C00A
	!word Runtime
	!word pztag
	!word $0050*3+8
}

	AUDIO = $0850
!zone jingle {
jingle:
	!word $0007
	!word $C00D
	!word .name
	!word .code
	!word .literals
	!word $0010
	!word $0000
	!word Runtime
	!word Nil
.name
	!word $8006
	!word $C010
	!raw "jingle"
.literals
	!word $0002
	!word $C00A
	!word AUDIO
	!word .N0
.code
	!word $800A
	!word $C00B
	!hex 4140D232	;; keystone
	!hex F1
	!align 1,0
.N0
	!word $8010
	!word $C00B
	!hex 00 07 05 07 00 0E
	!hex 00 38
	!hex 30 30 30
	!hex 00 38
	!hex 02
	!hex FF FF
	!align 1,0
}

!zone putString {
putString:	;; [runtime string offset] print string at screen[offset]
	!word $0007
	!word $C00D
	!word .name
	!word .code
	!word .literals
	!word $0010	;stackSize
	!word $0000	;tempSize
	!word Runtime
	!word Nil	;no text
.name
	!word $8009
	!word $C010
	!raw "putString"
	!align 1,0
.literals
	!word $0001
	!word $C00A
	!word $8000	;screen initial offset
.code
	!word $8010
	!word $C00B
	!hex 21D10451	;i(dbank count)
	!hex 4022D20A	;add offset to screen base i(dest dbank count)
	!hex 50		;i(sbank dest dbank count)
	!hex 2154D20A	;string[data] i(src sbank dest dbank count)
	!hex D530	;blit i()
	!hex F1		;return self
	!align 1,0
}

!zone ticker {

ticker:			;; (receiver) ticker: count
        !word $0007
        !word $C00D
        !word .name
        !word .code
        !word .literals
        !word $0010
        !word $0000
        !word Runtime
        !word Nil
.name
        !word $8007
        !word $C010
        !raw "ticker:"
        !align 1,0
.literals
        !word $0001
        !word $C00A
        !word $FFFF
.code
        !word $800C
        !word $C00B
        !hex 21		;; push counter
	!hex 40D20A	;; decrement
        !hex F450D201	;; == 0?
        !hex F80100	;; if False: loop
	!hex F5		;; drop counter
	!hex 515055	;; resume process zero XXX
	!hex D305F5
        !hex F60000	;; forever
}

pztag:	!word $0018
	!word $C010
	!raw "Pluton/0 65816 Computer "
blanks:	!word $0050
	!word $C010
	!fill $20, $20

messages:
	!raw "       <<Pluton/Zero>>          "
	!raw ".... 65816 Processor 4MHz ......"
	!raw "......... 216K RAM ............."
	!raw "... Little Smalltalk 4K ROM ...."
	!raw ". 6845 Video 80x24 Monochrome .."
	!raw ".... 2x 6551 Serial Ports ......"
	!raw "........ 1x VIA6522 ............"
	!raw "...... 1x AY3-8910 Audio ......."

FIN:
